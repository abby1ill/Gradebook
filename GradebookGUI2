mport java.util.Arrays;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.lang.Object;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.lang.Object;
import javax.swing.table.*;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.lang.Object;


import javax.swing.JComboBox;

public class GradebookGUI extends JFrame{

        private JFrame gradebookFrame;
        private JPanel classNamePanel, tablePanel, controlPanel;
        private JScrollPane scrollPane;
        private JTable gradeTable, gt;
        private JLabel classLabel, studentLabel, assignmentLabel;
	private GradebookClass gradebook;	
	private int totalRows; 
	public int selectedRow = 0;		

	private ArrayList <Grades> grades;
        private ArrayList<Student> students;
  	private ArrayList<String> points;
        private int numColumns, numRows;

	//Within MenuBar Tabs
        private JMenu fileTab, editTab, calculateTab, Edit_StudentTab;
        private JMenu Edit_AssignmentTab;
        private JMenuBar MenuBar;
        private JMenuItem Edit_Student_ChangeTab, Edit_Student_AddTab, Edit_Student_RemoveTab;
        private JMenuItem Edit_Assignment_ChangeTab, Edit_Assignment_AddTab, Edit_Assignment_RemoveTab;
        private JRadioButtonMenuItem studentAverage, assignmentAverage, finalAverage;

        public JTextField FNameEdit, LNameEdit, IDEdit;
        public JFrame changeStudentFrame;

	public JComboBox nameList;



	//NOW in gradebook class
	//Used in grade table, needs to be changed to open a file
        public static String[][] content;
        public static String [] columnNames = {"ID", "Last Name", "First Name", "Absent Days", "Assignment 1"};



        public GradebookGUI() {
                gradebookFrameCreation();
                initGradebook();
		numRows = 0;
         }

	

        private void gradebookFrameCreation() {
                gradebookFrame = new JFrame("Gradebook");
                gradebookFrame.setSize(1000,700);
                gradebookFrame.setLayout(new BorderLayout(5,5));
                gradebookFrame.getContentPane().setBackground(new Color(188, 86, 86));


               	MenuBar = new JMenuBar();
                fileTab = new JMenu();
                editTab = new JMenu();
                calculateTab = new JMenu();
                studentAverage = new JRadioButtonMenuItem();
                assignmentAverage = new JRadioButtonMenuItem();
                finalAverage = new JRadioButtonMenuItem();
                Edit_StudentTab = new JMenu();
                Edit_Student_ChangeTab = new JMenuItem();
                Edit_Student_AddTab = new JMenuItem();
                Edit_Student_RemoveTab = new JMenuItem();
                Edit_AssignmentTab = new JMenu();
                Edit_Assignment_ChangeTab = new JMenuItem();
                Edit_Assignment_AddTab = new JMenuItem();
                Edit_Assignment_RemoveTab = new JMenuItem();
		
nameList = new JComboBox();

                fileTab.setText("File");
               MenuBar.add(fileTab);

                editTab.setText("Edit");
                editTab.add(Edit_StudentTab);

      		calculateTab.setText("Calculate");
       	 	calculateTab.add(studentAverage);
        	studentAverage.setActionCommand("Student Grades");
        	studentAverage.addActionListener(new ButtonClickListener());

        	calculateTab.add(assignmentAverage);
        	calculateTab.add(finalAverage);

        	studentAverage.setText("Student Average");
       	 	assignmentAverage.setText("Assignment Average");
		assignmentAverage.setActionCommand("AssignmentAverage");
		assignmentAverage.addActionListener(new ButtonClickListener());


        	finalAverage.setText("Final Average");


       		MenuBar.add(calculateTab);

        	Edit_StudentTab.setText("Student");

        	//Edit_Student_ChangeTab.setText("Change");
        	//Edit_StudentTab.add(Edit_Student_ChangeTab);

        	//Edit_Student_ChangeTab.setActionCommand("ChangeStudent");
        	//Edit_Student_ChangeTab.addActionListener(new ButtonClickListener());

        	Edit_Student_AddTab.setText("Add");
        	Edit_StudentTab.add(Edit_Student_AddTab);
        	Edit_Student_AddTab.setActionCommand("AddStudent");
        	Edit_Student_AddTab.addActionListener(new ButtonClickListener());

        	Edit_Student_RemoveTab.setText("Remove");
        	Edit_StudentTab.add(Edit_Student_RemoveTab);
        	Edit_Student_RemoveTab.setActionCommand("RemoveStudent");
       		Edit_Student_RemoveTab.addActionListener(new ButtonClickListener());

        	Edit_AssignmentTab.setText("Assignment");

        	Edit_Assignment_ChangeTab.setText("Change");
        	Edit_AssignmentTab.add(Edit_Assignment_ChangeTab);
        	Edit_Assignment_ChangeTab.setActionCommand("ChangeAssignment");
        	Edit_Assignment_ChangeTab.addActionListener(new ButtonClickListener());

        	Edit_Assignment_AddTab.setText("Add");
        	Edit_AssignmentTab.add(Edit_Assignment_AddTab);
        	Edit_Assignment_AddTab.setActionCommand("AddAssignment");
        	Edit_Assignment_AddTab.addActionListener(new ButtonClickListener());

        	Edit_Assignment_RemoveTab.setText("Remove");
        	Edit_AssignmentTab.add(Edit_Assignment_RemoveTab);
        	Edit_Assignment_RemoveTab.setActionCommand("RemoveAssignment");
        	Edit_Assignment_RemoveTab.addActionListener(new ButtonClickListener());

        	editTab.add(Edit_AssignmentTab);
       		MenuBar.add(editTab);

        	gradebookFrame.add(MenuBar,BorderLayout.PAGE_START);


 		gradebookFrame.addWindowListener(new WindowAdapter() {
        		public void windowClosing(WindowEvent windowEvent){
           			System.exit(0);
         		}
      		});

    	}



        private void initGradebook() {
                tablePanel = new JPanel();
                tablePanel.setLayout(new GridLayout(0,1,1,1));
                controlPanel = new JPanel();
                classNamePanel = new JPanel();
		String[][] content;
         
                classLabel = new JLabel("Class name goes here");
                classLabel.setFont(new Font("Georgia", Font.PLAIN, 30));
                classLabel.setForeground(Color.white);


                tablePanel.setBackground(new Color(188, 86, 86));
                controlPanel.setBackground(new Color(188, 86, 86));


		gradeTable = new JTable (new DefaultTableModel());

//                gradeTable.getColumn("ID").setCellEditor(
//                new ButtonEditor(new JCheckBox()));

        	gradeTable = new JTable (new DefaultTableModel());

                classNamePanel.setBackground(new Color(188, 86, 86));
			
		//Opens cvs file
		try{

		//	int numRows = 0;
           		BufferedReader br = new BufferedReader(new FileReader(new File("/Users/mauraodonnell/test.csv")));
            		List<String[]> elements = new ArrayList<String[]>();
            		String line = null;
            		while((line = br.readLine())!=null) {
                		String[] splitted = line.split(",");
                		elements.add(splitted);
				numRows++;
            		}
            		br.close();

 	           	content = new String[elements.size()][numRows];
        	   	TableCellRenderer buttonRenderer = new ButtonRenderer();

           		for (int i =0; i<numRows; i++){
                		content[i][0] = elements.get(i)[0];
        		}

System.out.println(elements.size());
System.out.println(numRows);
           		for(int i=0; i<numRows-1; i++) {
				for (int j = 0; j<elements.size()-1; j++){
                			content[i][j] = elements.get(i)[j];
        			}
			}
		

			totalRows = elements.size();

			initGradeBook(content);
                
			setWidthAsPercentages(gradeTable, 0.05, 0.20, 0.25, 0.25, 0.25);
            		System.out.println(gradeTable.getModel().getValueAt(1, 1));

        	} catch (Exception ex) {
            		ex.printStackTrace();
        	}

		gradeTable.getColumn("ID").setCellRenderer(new ButtonRenderer());
    		gradeTable.getColumn("ID").setCellEditor(
        	new ButtonEditor(new JCheckBox()));

                scrollPane = new JScrollPane(gradeTable);
                gradeTable.setFillsViewportHeight(true);

                classNamePanel.add(classLabel);
                tablePanel.add(scrollPane);

                gradebookFrame.add(classNamePanel, BorderLayout.WEST);
                gradebookFrame.add(tablePanel,BorderLayout.CENTER);
                gradebookFrame.setVisible(true);
        }


	public void initGradeBook(String [][] c){

		students = new ArrayList<Student>();
                        grades = new ArrayList<Grades>();

                        for(int i= 0; i<numRows-1; i++){
                                Student s = new Student(c[i][2], c[i][1], c[i][0]);
                                students.add(s);
                        }


                        for (int k = 3; k < totalRows-1; k++){
                                        points = new ArrayList<String>();
                                          for (int j = 0; j<totalRows-1; j++){
                                                for(int i=0; i<numRows-1; i++) {
                                                        points.add(c[i][j]);
                                                }
                                        }
                                        Grades g = new Grades(null, null, points);
                                        grades.add(g);

                        }


                        gradeTable.setModel(new DefaultTableModel(c,columnNames));
	}
 

	private static void setWidthAsPercentages(JTable table, double... percentages) {
    		final double factor = 10000;

    		TableColumnModel model = table.getColumnModel();
    		for (int columnIndex = 0; columnIndex < percentages.length; columnIndex++) {
        		TableColumn column = model.getColumn(columnIndex);
        		column.setPreferredWidth((int) (percentages[columnIndex] * factor));
    		}
	}


	public class ButtonClickListener implements ActionListener{
                public void actionPerformed(ActionEvent e){
                        String command = e.getActionCommand();

                        if(command.equals("AddStudent")){

				((DefaultTableModel)gradeTable.getModel()).addRow(new Object[]{"","","",""});
			}


                     	  if (command.equals("RemoveStudent")){
                                changeStudentFrame = new JFrame("Add Student");
                                changeStudentFrame.setSize(200,200);
                                changeStudentFrame.setLayout(new BorderLayout(5,5));
                                //create an array that has a list of student names

                           
                                   JButton saveButton = new JButton("save");

 			
				System.out.println(gradeTable.getModel().getValueAt(0, 2));

				Object [] list;

				int row = gradeTable.getRowCount();
                                list = new Object[row];
				for (int i = 0; i< row; i++){
				System.out.println(gradeTable.getModel().getValueAt(i,2));
					list[i] = gradeTable.getModel().getValueAt(i,2);
                                        nameList.addItem(list[i]);

                                }                

saveButton.setActionCommand("saveRemoveButton");
                                saveButton.addActionListener(new ButtonClickListener());
				

 System.out.println(nameList.getSelectedItem());
				changeStudentFrame.add(nameList,BorderLayout.NORTH);
                                changeStudentFrame.add(saveButton, BorderLayout.SOUTH);
                                  changeStudentFrame.setVisible(true);
			}	 
			
			if(command.equals("saveRemoveButton")){
				int row = gradeTable.getRowCount();
                               int selectedRow= 0;
				for (int i = 0; i< row; i++){
                                        if (nameList.getSelectedItem() == gradeTable.getModel().getValueAt(i,2))
                                        selectedRow = i;
                                }

	                        ((DefaultTableModel)gradeTable.getModel()).removeRow(selectedRow);

				// changeStudentFrame.setVisible(false);
			}
			if (command.equals("AssignmentAverage")){
			int rowsCount = gradeTable.getRowCount();
      				  int sum = 0;

      				for(int i = 0; i < rowsCount-1; i++){
        			    sum = sum+Integer.parseInt(gradeTable.getValueAt(i, 3).toString());
       				}
		//	 float sum = getSum();
		//	        int rowsCount = gradeTable.getRowCount();
      				  float average = sum/rowsCount;
       				// return average;
		//		float average = sum/rowsCount;


		/*		Object[] av;
				av = new Object[gradeTable.getColumnCount()];
				String
				for (int i = 0; i<gradeTable.getRowCount(); i++){
					if (i == 0)
						Object[i] = "Average";
					if (i == 1 || i == 2)
						Object[i] = "";
					if (i>2)
						for (int j = 3; j<gradeTable.getRowCount(); j++)
							
				
				}*/

				((DefaultTableModel)gradeTable.getModel()).addRow(new Object[]{"","","",average});
                        
			}	

		}
	}
}

class ButtonRenderer extends JButton implements TableCellRenderer {

	public ButtonRenderer() {
    		setOpaque(true);
  	}

  	public Component getTableCellRendererComponent(JTable table, Object value,
      		boolean isSelected, boolean hasFocus, int row, int column) {
    		if (isSelected) {
      			setForeground(table.getSelectionForeground());
      			setBackground(table.getSelectionBackground());
    		} else {
      			setForeground(table.getForeground());
      			setBackground(UIManager.getColor("Button.background"));
  		}
    		setText((value == null) ? "" : value.toString());
    		return this;
  	}
}


class ButtonEditor extends DefaultCellEditor {
	protected JButton button;
  	private String label;
  	private boolean isPushed;

  	public ButtonEditor(JCheckBox checkBox) {
    		super(checkBox);
    		button = new JButton();
    		button.setOpaque(true);
   
		button.addActionListener(new ActionListener() {
      			public void actionPerformed(ActionEvent e) {
        		fireEditingStopped();
      			}
    		});
  	}

	public Component getTableCellEditorComponent(JTable table, Object value,
      		boolean isSelected, int row, int column) {
    		if (isSelected) {
      			button.setForeground(table.getSelectionForeground());
      			button.setBackground(table.getSelectionBackground());
    		} else {
      			button.setForeground(table.getForeground());
      			button.setBackground(table.getBackground());
    		}
    		label = (value == null) ? "" : value.toString();
    		button.setText(label);
    		isPushed = true;
    		return button;
  	}

  	public Object getCellEditorValue() {
    	if (isPushed) {
    
      		JOptionPane.showMessageDialog(button, label);
      		// System.out.println(label + ": Ouch!");
    	}
    		isPushed = false;
    		return new String(label);
  	}

 	 public boolean stopCellEditing() {
    		isPushed = false;
    		return super.stopCellEditing();
  	}
  
	protected void fireEditingStopped() {
    	super.fireEditingStopped();
  	}
}
